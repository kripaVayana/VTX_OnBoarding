{
  "pluginType": "JS",
  "pluginId": "js-plugin",
  "unpublishedAction": {
    "name": "onClick",
    "fullyQualifiedName": "authSignFrnCreateAndUpdate.onClick",
    "datasource": {
      "name": "UNUSED_DATASOURCE",
      "pluginId": "js-plugin",
      "messages": [],
      "isAutoGenerated": false,
      "deleted": false,
      "policies": [],
      "userPermissions": []
    },
    "pageId": "Auth Signatory Add Foreign",
    "collectionId": "Auth Signatory Add Foreign_authSignFrnCreateAndUpdate",
    "actionConfiguration": {
      "timeoutInMillisecond": 10000,
      "paginationType": "NONE",
      "encodeParamsToggle": true,
      "body": "async () => {\n\t\t\n\t\t/*if(Helper.validatePartnerPercentage()){\n\t\t\tnavigateTo('Auth Signatory Add India', {});\n\t\t\treturn false;\n\t\t}*/\n\t\tlet retValue = await Helper.validatePartnerPercentage()\n\t\tif(retValue == false){\n\t\t\tnavigateTo('Auth Signatory Add Foreign', {});\n\t\t\treturn false;\n\t\t}\n\t\tif (Input1.text == \"      \" ){\n\t\t\t\tshowAlert('Enter First Name')\n\t\t}\n\t\telse {\n\t\t\treturn isAuthSignPersonFrnExists.run(\n\t\t     async (response) => {\n\t\t\t\t //if(!!response && !!response.customerEntityPersonOIDForKeyPerson){\n\t\t\t\t if(appsmith.store.editKeyPersonOID != \"\"){\n\t\t\t\t\tshowAlert('Update to Auth Signatory Person India record::'+ appsmith.store.editKeyPersonOID) \n\t\t\t\t\tawait storeValue('customerEntityPersonOIDForAuthSignPerson',response.customerEntityPersonOIDForAuthSignPerson)\n\t\t\t\t\tawait updateAuthSignatoryFrn.run((response) => showAlert('Auth Signatory Person Details Updated'))\n\t\t\t\t\tHelper.updateAuthSignatoryPersonCurrencyLimitQuery();\n\t\t  \t}else {\n\t\t\t\t\tconst personOID = utils.generateOID(19);\n\t\t\t\t\t//await createAuthSignatoryFrn.run((response) => {showAlert('Key Person Details Added') },(error) => {showAlert('Key Person Details Failed')},{personOID});\n\t\t\t\t\t//await createAuthSignCurrencyLimit.run({personOID:personOID});\n\t\t\t\t\t//createAuthSignatoryFrn.run((response) => {return createAuthSignCurrencyLimit.run({personOID:personOID})},(error) => {showAlert('Key Person Details Failed')},{personOID});\n\t\t\t\t\tconst response_key_person = await createAuthSignatoryFrn.run({personOID});\n\t\t\t\t\tif (!!response_key_person) {\n\t\t\t\t\t\t\tshowAlert('Auth Signatory Person Details Added') \n\t\t\t\t\t\t\tawait createAuthSignCurrencyLimit.run({personOID})\n\t\t\t\t\t\t\tshowAlert('Auth Signatory Person Currency Limit Added') \n\t\t\t\t\t}\n\t\t  \t}\n\t\t\t\t \tnavigateTo('Auth Signatory Summary', {});\n\t\t   }\n\t    );\n\t\t} \n\t}",
      "jsArguments": [],
      "isAsync": true
    },
    "executeOnLoad": false,
    "dynamicBindingPathList": [
      {
        "key": "body"
      }
    ],
    "isValid": true,
    "invalids": [],
    "messages": [],
    "jsonPathKeys": [
      "async () => {\n\t\t\n\t\t/*if(Helper.validatePartnerPercentage()){\n\t\t\tnavigateTo('Auth Signatory Add India', {});\n\t\t\treturn false;\n\t\t}*/\n\t\tlet retValue = await Helper.validatePartnerPercentage()\n\t\tif(retValue == false){\n\t\t\tnavigateTo('Auth Signatory Add Foreign', {});\n\t\t\treturn false;\n\t\t}\n\t\tif (Input1.text == \"      \" ){\n\t\t\t\tshowAlert('Enter First Name')\n\t\t}\n\t\telse {\n\t\t\treturn isAuthSignPersonFrnExists.run(\n\t\t     async (response) => {\n\t\t\t\t //if(!!response && !!response.customerEntityPersonOIDForKeyPerson){\n\t\t\t\t if(appsmith.store.editKeyPersonOID != \"\"){\n\t\t\t\t\tshowAlert('Update to Auth Signatory Person India record::'+ appsmith.store.editKeyPersonOID) \n\t\t\t\t\tawait storeValue('customerEntityPersonOIDForAuthSignPerson',response.customerEntityPersonOIDForAuthSignPerson)\n\t\t\t\t\tawait updateAuthSignatoryFrn.run((response) => showAlert('Auth Signatory Person Details Updated'))\n\t\t\t\t\tHelper.updateAuthSignatoryPersonCurrencyLimitQuery();\n\t\t  \t}else {\n\t\t\t\t\tconst personOID = utils.generateOID(19);\n\t\t\t\t\t//await createAuthSignatoryFrn.run((response) => {showAlert('Key Person Details Added') },(error) => {showAlert('Key Person Details Failed')},{personOID});\n\t\t\t\t\t//await createAuthSignCurrencyLimit.run({personOID:personOID});\n\t\t\t\t\t//createAuthSignatoryFrn.run((response) => {return createAuthSignCurrencyLimit.run({personOID:personOID})},(error) => {showAlert('Key Person Details Failed')},{personOID});\n\t\t\t\t\tconst response_key_person = await createAuthSignatoryFrn.run({personOID});\n\t\t\t\t\tif (!!response_key_person) {\n\t\t\t\t\t\t\tshowAlert('Auth Signatory Person Details Added') \n\t\t\t\t\t\t\tawait createAuthSignCurrencyLimit.run({personOID})\n\t\t\t\t\t\t\tshowAlert('Auth Signatory Person Currency Limit Added') \n\t\t\t\t\t}\n\t\t  \t}\n\t\t\t\t \tnavigateTo('Auth Signatory Summary', {});\n\t\t   }\n\t    );\n\t\t} \n\t}"
    ],
    "userSetOnLoad": false,
    "confirmBeforeExecute": false,
    "policies": [],
    "userPermissions": []
  },
  "id": "Auth Signatory Add Foreign_authSignFrnCreateAndUpdate.onClick",
  "deleted": false,
  "gitSyncId": "621755a1972a414f3eae1d32_621cd908d5164d218fbe2b2f"
}