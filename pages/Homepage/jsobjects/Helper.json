{
  "unpublishedCollection": {
    "name": "Helper",
    "pageId": "Homepage",
    "pluginId": "js-plugin",
    "pluginType": "JS",
    "actions": [],
    "archivedActions": [],
    "body": "export default {\n\tonBoardCustomer: async () => {\n\t\t\n\tif(appsmith.store.vayApplicantRole!=\"\")\n\t\t\t\t{\n\t\t\t\t\tawait storeValue(\"customerID\",  appsmith.store.vayApplicantRole.substring(0,3).toUpperCase()+appsmith.store.customerIsIndForeign+[...Array(8)].map(() => Math.floor(Math.random() * 17).toString(17)).join(''));\n\t\t\t\t\tawait storeValue(\"customerParticipantID\",appsmith.store.vayApplicantRole.substring(0,3).toUpperCase()+appsmith.store.customerIsIndForeign+[...Array(8)].map(() => Math.floor(Math.random() * 18).toString(18)).join(''));\n\t\t\t\t\n\t\t\t\n\t\t\t//await storeValue(\"customerParticipantID\",  [...Array(8)].map(() => Math.floor(Math.random() * 18).toString(18)).join(''));\n\t\t\t//Need to add code for inserting Customer Data in Staging tables.\n\t\t\treturn updateCustomerIDandPartID.run( \n\t\t\t\t async (response) => {\n\t\t\t\t showAlert('Customer ID and Participant ID updated for Customer');\n\t\t\t\t await updateBankCustID.run( \n\t\t\t\t\t \t\tasync (response) => {\n\t\t\t\t \t\t\t\t\tshowAlert('Customer ID updated for Bank');\n\t\t\t\t \t\t\t\t\tawait updateKeyPersonCustID.run(\n\t\t\t\t\t\t\t\t\t\tasync (response) => {\n\t\t\t\t \t\t\t\t\t\t\t\tshowAlert('Customer ID updated for Key Person');\n\t\t\t\t \t\t\t\t\t\t\t\tawait updateKeyPersonLimitCustID.run(\n\t\t\t\t\t\t\t\t\t\t\t\t\tasync (response) => {\n\t\t\t\t \t\t\t\t\t\t\t\t\t\t\tshowAlert('Customer ID updated for Key Person');\n\t\t\t\t \t\t\t\t\t\t\t\t\t\t\tawait updateUBOCustID.run(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tasync (response) => {\n\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t\tshowAlert('Customer ID updated for UBO');\n\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t\tawait updateKYCCustID.run(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(response) => {\n\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tshowAlert('Customer ID updated for KYC Proofs');\n\t\t\t\t \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t\t\t\t} )\n\t\t\t\t\t\t\t} )\n\t\t\t  } )\n\t\t\tawait Helper.clearappsmithStore();\n\t\t}else{\n\t\t\t\t\tshowAlert('Customer Registration failed due to incorrect Data');\n\t\t\t\t\treturn;\n\t\t}\n\t},\n\tclearappsmithStore: ()=>{\n\t\tfor (let key in appsmith.store) {\n\t\tstoreValue(key,'') ;  \t\t\t\n\t\t\t if (appsmith.store.hasOwnProperty(key)) {\n        const value = appsmith.store[key];\n\t\t\t  if(key==\"vayApplicantName\"){\n\t\t\t\t\tstoreValue(key,'Test1402')\n\t\t\t\t}\n      //  showAlert(key, value);\n    }\n\t\t\tstoreValue('viewOnly','false')\n\t\t\tnavigateTo('New Application')\n\t}\n\t},\n\tdummy: ()=>{\n\t\treturn appsmith.store.vayApplicantRole.substring(0,3).toUpperCase()+appsmith.store.customerIsIndForeign+[...Array(8)].map(() => Math.floor(Math.random() * 17).toString(17)).join('');\n\t\t//return appsmith.store.vayApplicantRole.substring(0,3).toUpperCase()\n\t\t\n\t},\n\tchkRole : () => {\n\t\tif(appsmith.store.userRole == 'Maker')\n\t\t\treturn true\n\t\telse\n\t\t\treturn false \n\t}\n}",
    "variables": []
  },
  "id": "Homepage_Helper",
  "deleted": false,
  "gitSyncId": "621755a1972a414f3eae1d32_6218b6e97c115b642f1592c4"
}